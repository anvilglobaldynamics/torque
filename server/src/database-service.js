
const { CodedError } = require('./utils/coded-error');
const MongoClient = require('mongodb').MongoClient;
const ObjectId = require('mongodb').ObjectID;

class DatabaseService {

  constructor({ path, name }) {
    this._mongodbPath = path;
    this._mongodbDatabaseName = name;
    this._autoGeneratedKeyCollectionName = 'auto-generated-keys';
    this._db = null;
  }

  async __initializeAutoGeneratedKeyIndex(cbfn) {
    let doc = await this.findOne(this._autoGeneratedKeyCollectionName, { which: 'only' });
    if (doc) return;
    let count = await this.insertOne(this._autoGeneratedKeyCollectionName, { which: 'only' });
    if (count === 1) {
      throw new CodedError("INTERNAL_DATABASE_ERROR", "InternalError: Unable to create autoGeneratedKeyCollection");
    }
  }

  async initialize() {
    const client = await MongoClient.connect(url);
    const db = client.db(dbName);
    this._db = db;
    await __initializeAutoGeneratedKeyIndex();
  }

  getDatabaseHandle() {
    if (!this._db) {
      throw new Error("DeveloperError: Premature request for mongodb Database handle.");
    }
    return this._db;
  }

  async find(collectionName, query, { skip, limit, sort } = {}) {
    if (!sort) {
      sort = { 'id': -1 };
    }
    let command = this._db.collection(collectionName).find(query).sort(sort);
    if (skip) command.skip(skip);
    if (limit) command.limit(limit);
    return await command.toArray();
  }

  async findOne(collectionName, query, { skip, sort } = {}) {
    if (!sort) {
      sort = { 'id': -1 };
    }
    let command = this._db.collection(collectionName).find(query).sort(sort);
    if (skip) command.skip(skip);
    command.limit(1);
    let docList = await command.toArray();
    return (docList[0] || null);
  }

  async insertOne(collectionName, doc) {
    doc.id = await this._autoGenerateKey(collectionName);
    let results = await this._db.collection(collectionName).insertOne(doc);
    return (results.insertedCount === 1);
  }

  async insertMany(collectionName, docList) {
    await Promise.all(docList.map(async (doc) => {
      doc.id = await this._autoGenerateKey(collectionName);
    }));
    let results = await this._db.collection(collectionName).insertMany(docList);
    return results.insertedCount;
  }

  async insertOneRaw(collectionName, doc) {
    let results = await this._db.collection(collectionName).insertOne(doc);
    return (results.insertedCount === 1);
  }

  async insertManyRaw(collectionName, docList) {
    let results = await this._db.collection(collectionName).insertMany(docList);
    return results.insertedCount;
  }

  async replaceOne(collectionName, query, doc) {
    let results = await this._db.collection(collectionName).replaceOne(query, doc);
    return (results.matchedCount === 1);
  }

  async updateOne(collectionName, query, modifications) {
    let results = await this._db.collection(collectionName).updateOne(query, modifications);
    return (results.matchedCount === 1);
  }

  async updateMany(collectionName, query, modifications) {
    let results = await this._db.collection(collectionName).updateMany(query, modifications);
    return results.matchedCount;
  }

  async deleteOne(collectionName, query) {
    let results = await this._db.collection(collectionName).deleteOne(query);
    return (results.deletedCount === 1);
  }

  async deleteMany(collectionName, query) {
    let results = await this._db.collection(collectionName).deleteMany(query);
    return results.deletedCount;
  }

  async findByNativeId(collectionName, _id) {
    return await this.findOne(collectionName, { _id: ObjectId(_id) });
  }

  async updateAndReturnNew(collectionName, query, modifications) {
    let results = await this._db.collection(collectionName).findOneAndUpdate(query, modifications, { returnOriginal: false });
    return (results.value || null);
  }

  async _autoGenerateKey(collectionName) {
    let query = {
      which: 'only'
    };
    let modifications = {
      $inc: {
        [collectionName]: 1
      }
    };
    let doc = await this.updateAndReturnNew(this._autoGeneratedKeyCollectionName, query, modifications);
    if (!doc) {
      throw new CodedError("INTERNAL_DATABASE_ERROR", "Unable to auto-generate keys");
    }
    return doc[collectionName];
  }

}

exports.DatabaseService = DatabaseService;